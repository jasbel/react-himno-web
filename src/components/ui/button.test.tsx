import { render, screen, fireEvent } from '@testing-library/react';
import { Button } from './button'; // Adjust import path if necessary
import { vi } from 'vitest';

describe('Button component', () => {
  it('renders correctly with default props', () => {
    render(<Button>Click me</Button>);
    const buttonElement = screen.getByRole('button', { name: /click me/i });
    expect(buttonElement).toBeInTheDocument();
  });

  it('renders children correctly', () => {
    render(<Button><span>Hello</span></Button>);
    const buttonElement = screen.getByRole('button');
    expect(buttonElement).toHaveTextContent('Hello');
    expect(screen.getByText('Hello')).toBeInTheDocument();
  });

  it('handles onClick events', () => {
    const handleClick = vi.fn();
    render(<Button onClick={handleClick}>Clickable</Button>);
    const buttonElement = screen.getByRole('button', { name: /clickable/i });
    fireEvent.click(buttonElement);
    expect(handleClick).toHaveBeenCalledTimes(1);
  });

  it('applies variant and size props correctly', () => {
    // This test assumes 'variant' and 'size' props exist and affect classes.
    // Adjust class names based on actual implementation in button.tsx and cva.
    // You might need to inspect the actual class names generated by the cva function in button.tsx.
    render(
      <Button variant="destructive" size="sm">
        Destructive Small
      </Button>
    );
    const buttonElement = screen.getByRole('button', { name: /destructive small/i });
    // Example: Check for classes that these props might apply.
    // This is highly dependent on the actual cva implementation in button.tsx.
    // You'll likely need to inspect the button.tsx to know what classes to expect.
    // For example, if 'destructive' variant adds 'bg-destructive' and 'sm' size adds 'h-8 rounded-md px-3 text-xs'.
    expect(buttonElement).toHaveClass('bg-destructive'); // From buttonVariants
    expect(buttonElement).toHaveClass('h-8');       // From buttonVariants for size 'sm'
    expect(buttonElement).toHaveClass('text-xs'); // From buttonVariants for size 'sm'
  });

  it('is disabled when the disabled prop is true', () => {
    const handleClick = vi.fn();
    render(<Button onClick={handleClick} disabled>Disabled Button</Button>);
    const buttonElement = screen.getByRole('button', { name: /disabled button/i });
    expect(buttonElement).toBeDisabled();
    fireEvent.click(buttonElement);
    expect(handleClick).not.toHaveBeenCalled();
  });

  // Add more tests if there are other props like 'asChild', etc.
  // For 'asChild', you'd test if it renders the child component correctly.
  it('renders as child component when asChild prop is true', () => {
    render(
      <Button asChild>
        <a href="/home">Go Home</a>
      </Button>
    );
    // Check if it renders an anchor tag instead of a button
    const linkElement = screen.getByRole('link', { name: /go home/i });
    expect(linkElement).toBeInTheDocument();
    expect(linkElement).toHaveAttribute('href', '/home');
    // Ensure no button element is rendered if asChild is true and a child is provided
    // The button itself is the Comp, which is <Slot> which then renders the child.
    // So the role 'button' will not be found.
    expect(screen.queryByRole('button')).not.toBeInTheDocument();
  });
});
